let restaurant;var map;let id;window.initMap=(()=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),fillBreadcrumb(),DBHelper.mapMarkerForRestaurant(self.restaurant,self.map))})}),document.addEventListener("DOMContentLoaded",e=>{fetchRestaurantFromURL((e,t)=>{e?console.error(e):fillBreadcrumb()})}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(r,n)=>{self.restaurant=n,self.id=t,n?(fillRestaurantHTML(),e(null,n)):console.error(r)}):(error="No restaurant id in URL",e(error,null))}),fillRestaurantHTML=((e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=DBHelper.imageUrlForRestaurant(e),t.alt=DBHelper.imageAltText(e),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,fillRestaurantReviews(e.id),e.operating_hours&&fillRestaurantHoursHTML(),fillReviewsHTML()}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let r in e){const n=document.createElement("tr"),a=document.createElement("td");a.innerHTML=r,n.appendChild(a);const i=document.createElement("td");i.innerHTML=e[r],n.appendChild(i),t.appendChild(n)}}),fillReviewsHTML=(()=>{DBHelper.fetchReviewsRestaurantId(self.restaurant.id).then(e=>{const t=document.getElementById("reviews-container"),r=document.createElement("h3");if(r.innerHTML="Reviews",t.appendChild(r),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",e.id="noReviews",void t.appendChild(e)}const n=document.getElementById("reviews-list");e.forEach(e=>{n.appendChild(createReviewHTML(e,!1))}),t.appendChild(n)}).catch(e=>{console.log("error in fetching reviews")})}),createReviewHTML=((e,t)=>{const r=document.createElement("li"),n=document.createElement("p");n.innerHTML=e.name,r.appendChild(n);const a=document.createElement("p");var i=new Date(e.updatedAt);a.innerHTML=`${i.getDay()}.${i.getMonth()+1}.${i.getFullYear()}`,r.appendChild(a);const o=document.createElement("p");o.innerHTML=`Rating: ${e.rating}`,r.appendChild(o);const l=document.createElement("p");return l.innerHTML=e.comments,r.appendChild(l),t&&!navigator.onLine&&r.classList.add("offline"),r}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),r=document.createElement("li");r.innerHTML=e.name,t.appendChild(r)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const r=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return r?r[2]?decodeURIComponent(r[2].replace(/\+/g," ")):"":null}),fillRestaurantReviews=(e=>{}),addReview=(()=>{let e=self.id,t=document.getElementById("reviewAuthor"),r=document.getElementById("comment"),n=0;for(let e=1;e<=5;e++){let t=document.getElementById("star"+e);t&&t.checked&&(n=e)}let a=document.getElementById("errors"),i=!1;if(!t||!t.value){const e=document.createElement("li");e.innerHTML="Fill your name",a.appendChild(e),i=!0}if(!r||!r.value){const e=document.createElement("li");e.innerHTML="Fill your comment",a.appendChild(e),i=!0}if(!n){const e=document.createElement("li");e.innerHTML="Fill your rating",a.appendChild(e),i=!0}if(i){let e=document.createElement("h4");return e.innerHTML="Errors in the form:",e.id="errorHead",void document.getElementById("errorSection").appendChild(e)}let o=document.getElementById("errorHead");o&&o.parentNode.removeChild(o);let l={restaurant_id:e,name:t.value,comments:r.value,rating:n};console.log(l),DBHelper.addReviewToServer(l),addReviewToHtml(l),document.getElementById("add-review-form").reset()}),addReviewToHtml=(e=>{if(!e)return;let t=document.getElementById("noReviews");t&&t.parentNode.removeChild(t),e.createdAt=(new Date).getTime(),e.updatedAt=(new Date).getTime(),document.getElementById("reviews-list").appendChild(createReviewHTML(e,!0))});const dbName="restaurants",storeName="restaurants",reviewsStoreName="reviews";class DBHelper{static get API_URL_BASE(){return"http://127.0.0.1:1337/"}static get API_URL(){return"http://127.0.0.1:1337/restaurants"}static get dbPromise(){return navigator.serviceWorker?idb.open(dbName,1,e=>{e.createObjectStore(storeName,{keyPath:"id"}),e.createObjectStore(reviewsStoreName,{keyPath:"id",autoIncrement:!0}).createIndex("restaurant_id","restaurant_id")}):Promise.resolve()}static fetchRestaurants(e){DBHelper.dbPromise.then(t=>{if(t){t.transaction(dbName).objectStore(storeName).getAll().then(t=>{t&&0!==t.length?e(null,t):DBHelper.xhrForRestaurant(e)})}else DBHelper.xhrForRestaurant(e)})}static xhrForRestaurant(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.API_URL),t.onload=(()=>{if(200===t.status){const r=JSON.parse(t.responseText);DBHelper.storeRestaurantsDB(r),e(null,r)}else{const r=`Request failed. Returned status of ${t.status}`;e(r,null)}}),t.send()}static storeRestaurantsDB(e){DBHelper.dbPromise.then(t=>{if(!t)return;const r=t.transaction(dbName,"readwrite").objectStore(storeName);e.forEach(e=>{r.put(e)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e&&void 0!==e.photograph?`/img/${e.photograph}.webp`:null}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static imageAltText(e){return e.name+" restaurant in "+e.neighborhood+" offers "+e.cuisine_type+" cuisine type"}static updateFavStatus(e,t){fetch(DBHelper.API_URL+"/"+e+"/?is_favorite="+t,{method:"PUT"}).then(()=>{DBHelper.dbPromise.then(r=>{const n=r.transaction(dbName,"readwrite").objectStore(storeName);n.get(e).then(e=>{e.is_favorite=t,n.put(e)})})})}static fetchReviewsRestaurantId(e){return fetch(DBHelper.API_URL_BASE+"reviews/?restaurant_id="+e).then(e=>e.json().then(e=>DBHelper.dbPromise.then(t=>{const r=t.transaction(reviewsStoreName,"readwrite").objectStore(reviewsStoreName);return Array.isArray(e)?e.forEach(e=>{r.put(e)}):r.put(e),Promise.resolve(e)}))).catch(t=>DBHelper.dbPromise.then(t=>{return t.transaction(reviewsStoreName,"readwrite").objectStore(reviewsStoreName).index(dbName).getAll(e)}).then(e=>Promise.resolve(e)))}static addReviewToServer(e){navigator.onLine?DBHelper.onlineAddReview(e):DBHelper.offlineAddReview(e)}static offlineAddReview(e){localStorage.setItem("offline_review",JSON.stringify(e)),window.addEventListener("online",e=>{let t=JSON.parse(localStorage.getItem("offline_review"));if(t){DBHelper.addReviewToServer(t),localStorage.removeItem("offline_review");var r=document.getElementById("reviews-list").getElementsByClassName("offline");if(r)for(var n=0;n<r.length;n++)r[n].classList.remove("offline")}})}static onlineAddReview(e){fetch(DBHelper.API_URL_BASE+"reviews",{method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(e)}).then(e=>e).catch(e=>{console.log("error in posting online review")})}}
//# sourceMappingURL=dist/detail.min.js.map
