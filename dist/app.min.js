let restaurants,neighborhoods,cuisines;var map,markers=[];document.addEventListener("DOMContentLoaded",e=>{updateRestaurants(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const r=document.createElement("option");r.innerHTML=e,r.value=e,t.append(r)})}),window.initMap=(()=>{if("none"==document.getElementById("map-container").style.display||map)return;self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1})}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),r=e.selectedIndex,a=t.selectedIndex,n=e[r].value,s=t[a].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("div");var r=DBHelper.imageUrlForRestaurant(e);const a=document.createElement("img");a.className="restaurant-img",r&&(a.src=r),a.alt=DBHelper.imageAltText(e),t.append(a);const n=document.createElement("div"),s=document.createElement("h2");s.innerHTML=e.name,n.append(s);const o=document.createElement("button");o.type="button",o.classList.add("favButton"),o.innerHTML="❤",o.onclick=(()=>{let t=!e.is_favorite;DBHelper.updateFavStatus(e.id,t),e.is_favorite=t,changeFavButton(o,e.is_favorite)}),changeFavButton(o,e.is_favorite),n.append(o);const i=document.createElement("p");i.innerHTML=e.neighborhood,n.append(i);const l=document.createElement("p");l.innerHTML=e.address,n.append(l);const c=document.createElement("a");c.innerHTML="View Details",c.href=DBHelper.urlForRestaurant(e);var u=document.createAttribute("role");u.value="button",c.setAttributeNode(u);var d=document.createAttribute("tabindex");d.value=0,c.setAttributeNode(d);var m=document.createAttribute("aria-label");return m.value="detail for "+e.name+" restaurant",c.setAttributeNode(m),n.append(c),t.append(n),t}),changeFavButton=((e,t)=>{t?(e.setAttribute("aria-label","Set as not favorite restaurant."),e.classList.add("fav"),e.classList.remove("notFav")):(e.setAttribute("aria-label","Set as favorite restaurant."),e.classList.add("notFav"),e.classList.remove("fav"))}),addMarkersToMap=((e=self.restaurants)=>{self.map&&e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),hamIconClick=(()=>{var e=document.getElementById("ham_icon");e.parentNode.removeChild(e);var t=document.getElementById("map-container");t.style.display="block",t||initMap()});const dbName="restaurants",storeName="restaurants",reviewsStoreName="reviews";class DBHelper{static get API_URL_BASE(){return"http://127.0.0.1:1337/"}static get API_URL(){return"http://127.0.0.1:1337/restaurants"}static get dbPromise(){return navigator.serviceWorker?idb.open(dbName,1,e=>{e.createObjectStore(storeName,{keyPath:"id"})}):Promise.resolve()}static fetchRestaurants(e){DBHelper.dbPromise.then(t=>{if(t){t.transaction(dbName).objectStore(storeName).getAll().then(t=>{t&&0!==t.length?e(null,t):DBHelper.xhrForRestaurant(e)})}else DBHelper.xhrForRestaurant(e)})}static xhrForRestaurant(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.API_URL),t.onload=(()=>{if(200===t.status){const r=JSON.parse(t.responseText);DBHelper.storeRestaurantsDB(r),e(null,r)}else{const r=`Request failed. Returned status of ${t.status}`;e(r,null)}}),t.send()}static storeRestaurantsDB(e){DBHelper.dbPromise.then(t=>{if(!t)return;const r=t.transaction(dbName,"readwrite").objectStore(storeName);e.forEach(e=>{r.put(e)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,a)=>{if(r)t(r,null);else{const r=a.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=e&&(a=a.filter(t=>t.cuisine_type==e)),"all"!=t&&(a=a.filter(e=>e.neighborhood==t)),r(null,a)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),a=t.filter((e,r)=>t.indexOf(e)==r);e(null,a)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e&&void 0!==e.photograph?`/img/${e.photograph}.webp`:null}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static imageAltText(e){return e.name+" restaurant in "+e.neighborhood+" offers "+e.cuisine_type+" cuisine type"}static updateFavStatus(e,t){fetch(DBHelper.API_URL+"/"+e+"/?is_favorite="+t,{method:"PUT"}).then(()=>{DBHelper.dbPromise.then(r=>{const a=r.transaction(dbName,"readwrite").objectStore(storeName);a.get(e).then(e=>{e.is_favorite=t,a.put(e)})})})}static fetchReviewsRestaurantId(e){return fetch(DBHelper.API_URL_BASE+"reviews/?restaurant_id="+e).then(e=>{e.json()}).then(e=>(DBHelper.dbPromise.then(t=>{const r=t.transaction(dbName,"readwrite").objectStore(reviewsStoreName);Array.isArray(e)?e.forEach(e=>{r.put(e)}):r.put(e)}),Promise.resolve(e))).catch(t=>DBHelper.dbPromise.then(t=>{return t.transaction(dbName,"readwrite").objectStore(reviewsStoreName).index(dbName).getAll(e)}).then(e=>Promise.resolve(e)))}static addReviewToServer(e){navigator.onLine?DBHelper.onlineAddReview(e):DBHelper.offlineAddReview(e)}static offlineAddReview(e){localStorage.setItem("offline_review",JSON.stringify(e)),window.addEventListener("online",e=>{let t=JSON.parse(localStorage.getItem("offline_review"));t||(DBHelper.addReviewToServer(t),localStorage.removeItem("offline_review"))})}static onlineAddReview(e){fetch(DBHelper.API_URL_BASE+"reviews",{method:"POST",headers:new Headers({"Content-Type":"application/json"}),body:JSON.stringify(e)}).then(e=>e).catch(e=>{console.log("error in posting online review")})}}
//# sourceMappingURL=dist/app.min.js.map
