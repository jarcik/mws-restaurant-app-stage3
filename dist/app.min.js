let restaurants,neighborhoods,cuisines;var map,markers=[];document.addEventListener("DOMContentLoaded",e=>{updateRestaurants(),fetchNeighborhoods(),fetchCuisines()}),fetchNeighborhoods=(()=>{DBHelper.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,fillNeighborhoodsHTML())})}),fillNeighborhoodsHTML=((e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),fetchCuisines=(()=>{DBHelper.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,fillCuisinesHTML())})}),fillCuisinesHTML=((e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const a=document.createElement("option");a.innerHTML=e,a.value=e,t.append(a)})}),window.initMap=(()=>{if("none"==document.getElementById("map-container").style.display||map)return;self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1})}),updateRestaurants=(()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),a=e.selectedIndex,r=t.selectedIndex,n=e[a].value,s=t[r].value;DBHelper.fetchRestaurantByCuisineAndNeighborhood(n,s,(e,t)=>{e?console.error(e):(resetRestaurants(t),fillRestaurantsHTML())})}),resetRestaurants=(e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",self.markers.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e}),fillRestaurantsHTML=((e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach(e=>{t.append(createRestaurantHTML(e))}),addMarkersToMap()}),createRestaurantHTML=(e=>{const t=document.createElement("div");var a=DBHelper.imageUrlForRestaurant(e);const r=document.createElement("img");r.className="restaurant-img",a&&(r.src=a),r.alt=DBHelper.imageAltText(e),t.append(r);const n=document.createElement("div"),s=document.createElement("h2");s.innerHTML=e.name,n.append(s);const o=document.createElement("button");o.type="button",o.classList.add("favButton"),o.innerHTML="❤",o.onclick=(()=>{let t=!e.is_favorite;DBHelper.updateFavStatus(e.id,t),e.is_favorite=t,changeFavButton(o,e.is_favorite)}),changeFavButton(o,e.is_favorite),n.append(o);const l=document.createElement("p");l.innerHTML=e.neighborhood,n.append(l);const i=document.createElement("p");i.innerHTML=e.address,n.append(i);const u=document.createElement("a");u.innerHTML="View Details",u.href=DBHelper.urlForRestaurant(e);var c=document.createAttribute("role");c.value="button",u.setAttributeNode(c);var d=document.createAttribute("tabindex");d.value=0,u.setAttributeNode(d);var m=document.createAttribute("aria-label");return m.value="detail for "+e.name+" restaurant",u.setAttributeNode(m),n.append(u),t.append(n),t}),changeFavButton=((e,t)=>{t?(e.setAttribute("aria-label","Set as not favorite restaurant."),e.classList.add("fav"),e.classList.remove("notFav")):(e.setAttribute("aria-label","Set as favorite restaurant."),e.classList.add("notFav"),e.classList.remove("fav"))}),addMarkersToMap=((e=self.restaurants)=>{self.map&&e.forEach(e=>{const t=DBHelper.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}),hamIconClick=(()=>{var e=document.getElementById("ham_icon");e.parentNode.removeChild(e);var t=document.getElementById("map-container");t.style.display="block",t||initMap()});const dbName="restaurants",storeName="restaurants";class DBHelper{static get API_URL(){return"http://127.0.0.1:1337/restaurants"}static get dbPromise(){return navigator.serviceWorker?idb.open(dbName,1,e=>{e.createObjectStore(storeName,{keyPath:"id"})}):Promise.resolve()}static fetchRestaurants(e){DBHelper.dbPromise.then(t=>{if(t){t.transaction(dbName).objectStore(storeName).getAll().then(t=>{t&&0!==t.length?e(null,t):DBHelper.xhrForRestaurant(e)})}else DBHelper.xhrForRestaurant(e)})}static xhrForRestaurant(e){let t=new XMLHttpRequest;t.open("GET",DBHelper.API_URL),t.onload=(()=>{if(200===t.status){const a=JSON.parse(t.responseText);DBHelper.storeRestaurantsDB(a),e(null,a)}else{const a=`Request failed. Returned status of ${t.status}`;e(a,null)}}),t.send()}static storeRestaurantsDB(e){DBHelper.dbPromise.then(t=>{if(!t)return;const a=t.transaction(dbName,"readwrite").objectStore(storeName);e.forEach(e=>{a.put(e)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((a,r)=>{if(a)t(a,null);else{const a=r.find(t=>t.id==e);a?t(null,a):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((a,r)=>{if(a)t(a,null);else{const a=r.filter(t=>t.cuisine_type==e);t(null,a)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((a,r)=>{if(a)t(a,null);else{const a=r.filter(t=>t.neighborhood==e);t(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,a){DBHelper.fetchRestaurants((r,n)=>{if(r)a(r,null);else{let r=n;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),a(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].neighborhood),r=t.filter((e,a)=>t.indexOf(e)==a);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,a)=>{if(t)e(t,null);else{const t=a.map((e,t)=>a[t].cuisine_type),r=t.filter((e,a)=>t.indexOf(e)==a);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return e&&void 0!==e.photograph?`/img/${e.photograph}.webp`:null}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static imageAltText(e){return e.name+" restaurant in "+e.neighborhood+" offers "+e.cuisine_type+" cuisine type"}static updateFavStatus(e,t){fetch(DBHelper.API_URL+"/"+e+"/?is_favorite="+t,{method:"PUT"}).then(()=>{DBHelper.dbPromise.then(a=>{const r=a.transaction(dbName,"readwrite").objectStore(storeName);r.get(e).then(e=>{e.is_favorite=t,r.put(e)})})})}}
//# sourceMappingURL=dist/app.min.js.map
